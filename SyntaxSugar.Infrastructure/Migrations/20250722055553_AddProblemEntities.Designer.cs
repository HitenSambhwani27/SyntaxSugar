// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SyntaxSugar.Infrastructure.Data;

#nullable disable

namespace SyntaxSugar.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250722055553_AddProblemEntities")]
    partial class AddProblemEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SyntaxSugar.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.ProblemTag", b =>
                {
                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProblemId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProblemTags");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.UserProblemStatus", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttemptsCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAttemptedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ProblemId");

                    b.HasIndex("ProblemId");

                    b.ToTable("UserProblemStatuses");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.Problem", b =>
                {
                    b.HasOne("SyntaxSugar.Core.Entities.Category", "Category")
                        .WithMany("Problems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.ProblemTag", b =>
                {
                    b.HasOne("SyntaxSugar.Core.Entities.Problem", "Problem")
                        .WithMany("ProblemTags")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SyntaxSugar.Core.Entities.Tag", "Tag")
                        .WithMany("ProblemTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.UserProblemStatus", b =>
                {
                    b.HasOne("SyntaxSugar.Core.Entities.Problem", "Problem")
                        .WithMany("UserProblemStatuses")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SyntaxSugar.Core.Entities.User", "User")
                        .WithMany("UserProblemStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.Category", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.Problem", b =>
                {
                    b.Navigation("ProblemTags");

                    b.Navigation("UserProblemStatuses");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.Tag", b =>
                {
                    b.Navigation("ProblemTags");
                });

            modelBuilder.Entity("SyntaxSugar.Core.Entities.User", b =>
                {
                    b.Navigation("UserProblemStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}

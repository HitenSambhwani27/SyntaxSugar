# This is the name of your GitHub Actions workflow.
name: .NET Build, Test, and Release

# This workflow runs on pushes to the 'main' branch.
on:
  push:
    branches: [ "main" ]

# Environment variables available to all jobs in the workflow.
env:
  DOTNET_VERSION: '7.0.x'      # .NET version to use
  SOLUTION_FILE_PATH: .        # Path to your solution file
  PROJECT_PATH: ./SyntaxSugar.API/SyntaxSugar.API.csproj # Path to the API project to be published

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}

    - name: Build
      run: dotnet build ${{ env.SOLUTION_FILE_PATH }} --configuration Release --no-restore
    
    - name: Test
      run: dotnet test ${{ env.SOLUTION_FILE_PATH }} --no-build --configuration Release

    # Publish the API project to a folder named 'publish'
    - name: Publish
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ./publish

    # Upload the 'publish' folder as an artifact so the release job can use it.
    - name: Upload artifact for release
      uses: actions/upload-artifact@v3
      with:
        name: api-release
        path: ./publish

  create-release:
    name: Create Release
    # This job will only run if the 'build-and-test' job completes successfully.
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    # Step 1: Download the artifact that was published by the build job.
    - name: Download artifact from build job
      uses: actions/download-artifact@v2
      with:
        name: api-release

    # Step 2: Zip the downloaded artifact.
    - name: Zip the release artifact
      run: zip -r release.zip .

    # Step 3: Create the GitHub Release.
    # This action automatically creates a new release and uploads the specified files.
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        # This creates a tag and release name based on the date and time, e.g., "Release-2025-07-29-0830"
        tag_name: Release-${{ github.run_number }}
        name: Release ${{ github.run_number }}
        body: |
          Automated release created by GitHub Actions.
          Commit: ${{ github.sha }}
        # This attaches the 'release.zip' file we created to the release page.
        files: release.zip
      env:
        # The GITHUB_TOKEN is automatically provided by GitHub Actions.
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

